['\n', '[ PID: 13060 - firefox.exe - hao123_\xc9\xcf\xcd\xf8\xb4\xd3\xd5\xe2\xc0\xef\xbf\xaa\xca\xbc - Mozilla Firefox ][T][A][I][W][Space][D][A][X][Space][Return]\n', '[ PID: 5192 - ? - QQEdit ][Back][C][Y][Back][Back][Back][Back][Back][Back][Back][C][Y][Lshift][2][Return]\n', '[ PID: 13040 - ? - QQ ][Numpad1][Numpad5]\n', '[ PID: 5192 - ? - QQEdit ][Numlock][Numlock][Numpad5][Back][C][Y][Lshift][2][Numpad1][Numpad5][Numpad6][Numpad8][Numpad2][Numpad8][Numpad4][Numpad0][Numpad1][Numpad4][Numpad8][Return]\n', '[ PID: 10416 - iexplore.exe - \xb0\xd9\xb6\xc8\xd2\xbb\xcf\xc2\xa3\xac\xc4\xe3\xbe\xcd\xd6\xaa\xb5\xc0 - Internet Explorer ][S][H][A][N][G][H][A][I][T][Space]\n', '[ PID: 10416 - iexplore.exe - \xc9\xcf\xba\xa3\xcc\xb2_\xb0\xd9\xb6\xc8\xcb\xd1\xcb\xf7 - Internet Explorer ][Oem_Period][Back][Rshift][Oem_Period][M][P][3]\n', '[ PID: 10416 - iexplore.exe - \xc9\xcf\xba\xa3\xcc\xb2mp3\xc3\xe2\xb7\xd1\xcf\xc2\xd4\xd8_\xb0\xd9\xb6\xc8\xcb\xd1\xcb\xf7 - Internet Explorer ][Back][G][R][A][S][S][W][A][L][K][Return]']