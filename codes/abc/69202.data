['\n', '[ PID: 6512 - ? - QQ ][Space][Space][F5][F6][Space][Apps][Apps][Apps])\n', '[ PID: 1404 - ? - Program Manager ][Return][Return]\n', '[ PID: 5992 - ? - \xb0\xd9\xb6\xc8\xd2\xbb\xcf\xc2\xa3\xac\xc4\xe3\xbe\xcd\xd6\xaa\xb5\xc0 - Internet Explorer ]HECK[Return][Return]\n', '[ PID: 3512 - ? - G2:M1:V1 - Gaussian Calculation Setup ][Back]SCRF[Return]=[Rshift][Rshift][Rshift][Rshift][Rshift][Rshift][Rshift][Rshift][Rshift][Rshift][Rshift][Rshift][Rshift][Rshift][Rshift][Rshift][Rshift][Rshift][Rshift][Rshift][Rshift][Rshift][Rshift][Rshift][Rshift][Rshift][Rshift][Rshift]90[Left][Right][Right][Back][Back][Rshift][Rshift][Rshift][Rshift][Rshift][Rshift][Rshift][Rshift][Rshift]90[Left]A[Back]SMD,SOLVENT=[Capital]THF[Capital],DOVACUUM\n', '[ PID: 3512 - ? - G2:M1:V1 - Save File ][Space]1\n', '[ PID: 4368 - Explorer.EXE - Program Manager ][Return][Rshift][Lcontrol][Lcontrol][Lcontrol][Lcontrol][Lcontrol][Lcontrol][Lcontrol][Rshift]?????\n', '[ PID: 6384 - iexplore.exe - \xb0\xd9\xb6\xc8\xd2\xbb\xcf\xc2\xa3\xac\xc4\xe3\xbe\xcd\xd6\xaa\xb5\xc0 - Internet Explorer ][Apps][Rshift][Return]xinse[Back][Back]gsheng[Back][Back][Back][Back][Back][Back]shengzhi[Left][Left][Left][Right][Right][Right]g[Right][Right][Right][Right][Right][Right][Right][Right]@[Return]\n', '[ PID: 6384 - ? - \xd0\xd0\xca\xa1\xd6\xc6_\xb0\xd9\xb6\xc8\xcb\xd1\xcb\xf7 - Internet Explorer ]bosi[Space][Return]\n', '[ PID: 6384 - ? - \xd0\xd0\xca\xa1\xd6\xc6\xb2\xa8\xcb\xb9_\xb0\xd9\xb6\xc8\xcb\xd1\xcb\xf7 - Internet Explorer ][Back][Back]laiyuan[Space][Return]\n', '[ PID: 6384 - ? - \xd0\xd0\xca\xa1\xd6\xc6\xc0\xb4\xd4\xb4_\xb0\xd9\xb6\xc8\xcb\xd1\xcb\xf7 - Internet Explorer ]yuanai[Back][Back]dai[Space][Return]\n', '[ PID: 6384 - ? - \xd4\xaa\xb4\xfa\xd0\xd0\xca\xa1\xd6\xc6\xc0\xb4\xd4\xb4_\xb0\xd9\xb6\xc8\xcb\xd1\xcb\xf7 - Internet Explorer ]zhoguo[Space]zhiwang[Space][Return][Rshift][Return]\n', '[ PID: 6384 - ? - \xd6\xd0\xb9\xfa\xd6\xaa\xcd\xf8\xd4\xaa\xb4\xfa\xd0\xd0\xca\xa1\xd6\xc6\xc0\xb4\xd4\xb4_\xb0\xd9\xb6\xc8\xcb\xd1\xcb\xf7 - Internet Explorer ][Back][Return]\n', '[ PID: 6384 - ? - \xd6\xd0\xb9\xfa\xd6\xaa\xcd\xf8 - Internet Explorer ]yuanai[Back][Back][Back][Back][Back][Back]xinsheng[Left][Left][Left][Right][Left][Left]g[Right][Right][Right][Right][Right]zhi[Space][Return]\n', '[ PID: 6384 - ? - \xd6\xd0\xb9\xfa\xd6\xaa\xcd\xf8_\xb0\xd9\xb6\xc8\xcb\xd1\xcb\xf7 - Internet Explorer ]xian[Capital]dai[Lshift][Capital]\n', '[ PID: 6384 - \xd5\xf8 - \xcf\xd6\xb4\xfa_\xb0\xd9\xb6\xc8\xcb\xd1\xcb\xf7 - Internet Explorer ][Back][Back][Back][Back][Back][Back][Back][Lshift]xiandaihanyu[Space]\n', '[ PID: 6384 - \xd5\xf8 - \xcf\xd6\xb4\xfa\xba\xba\xd3\xef\xbd\xcc\xd1\xa7\xd3\xeb\xd7\xd4\xd1\xa7\xb2\xce\xbf\xbc_\xb0\xd9\xb6\xc8\xcb\xd1\xcb\xf7 - Internet Explorer ][Back][Back][Back][Back][Back]\n', '[ PID: 6384 - \xd5\xf8 - \xcf\xd6\xb4\xfa\xba\xba\xd3\xef\xbd\xcc\xd1\xa7_\xb0\xd9\xb6\xc8\xcb\xd1\xcb\xf7 - Internet Explorer ][Back][Back][Back][Back][Back][Back][Back][Back][Back][Back][Back][Back][Back][Back][Back]\n', '[ PID: 6384 - \xd5\xf8 - \xcf\xd6\xb4\xfa\xba\xba\xd3\xef\xb4\xca\xb5\xe4_\xb0\xd9\xb6\xc8\xcb\xd1\xcb\xf7 - Internet Explorer ]wagyiyun[Space]\n', '[ PID: 6384 - \xd5\xf8 - QQ\xd5\xca\xba\xc5\xb0\xb2\xc8\xab\xb5\xc7\xc2\xbc - Internet Explorer ][Numpad2][Numpad5][Numpad3][Numpad5][Numpad7][Numpad9][Numpad1][Numpad8][Numpad5][Numpad5]tanxiaoyang@@&<[Return]\n', '[ PID: 6384 - \xd5\xf8 - ? \xce\xd2\xb2\xbb\xca\xc7\xc4\xe3\xb5\xc4\xb9\xdb\xc9\xcd\xd3\xe3 - Internet Explorer ]zhujundetaiang[Back][Back][Back]yag[Space][Return]\n', '[ PID: 6384 - \xd5\xf8 - ? ??? ???(??? ?? OST) - Internet Explorer ]lihongji[Space][Return]\n', '[ PID: 6384 - \xd5\xf8 - ? ?? ?? - Internet Explorer ]hong\n', '[ PID: 4368 - \xd5\xf8 -  ][Left][Down][Down]\n', '[ PID: 4368 - \xd5\xf8 - Program Manager ][Rwin]\n', '[ PID: 4368 - \xd5\xf8 -  ][Return][Return][Return][Return][Return][Return][Return][Return][Return][Return][Return][Return][Return][Return][Return][Return][Return][Return][Return][Return][Return][Return][Return][Return][Return][Return][Return][Return][Return][Return][Return][Return][Return][Return][Return][Return][Return][Return][Return][Return][Return][Return][Return][Return][Return][Return][Return][Return][Return][Return][Return][Return][Return][Return][Return][Return][Return][Return][Return][Return][Return][Return][Return][Return][Return][Return][Return][Return][Return][Return][Return][Return][Return][Return][Return][Return][Return][Return][Return][Return][Return][Return][Return][Return][Return][Return][Return][Return][Return][Return][Return][Return][Return][Return][Return][Return][Return][Return][Return][Return][Return][Return][Return][Return][Return][Return][Return][Return][Return][Return][Return][Return][Return][Return][Return][Return][Return][Return][Return][Return][Return][Return][Return][Return][Return][Return][Return][Return][Return][Return][Return][Return][Return][Return][Return][Return][Return][Return][Return][Return][Return][Return][Return][Return][Return][Return][Return][Return][Return][Return][Return][Return][Return][Return][Return][Return][Return][Return][Return][Return][Return][Return][Return][Return][Return][Return][Return][Return][Return][Return][Return][Return][Return][Return]\n', '[ PID: 5720 - \xd5\xf8 - OriginPro 9 64-bit - C:\\Users\\Administrator\\Documents\\OriginLab\\90\\User Files\\UNTITLED * ]fffff[Return][Lshift][Capital]h[Lshift][Capital]z[Return][Lshift]u[Back][Lshift][Lshift][Capital]u[Down][Down]vhz[Back][Lshift][Capital]z[Lshift][Lshift][Lshift][Capital]v[Back][Back]%))[Lcontrol]v%))!&)@[Return]!&(*[Return]!()@[Return]@))![Return]@!)![Return]@@)![Return]@@@)[Return]@@$)[Return]@@^)[Return]@@*)[Return]@#)![Return]#[Back]@#@)[Return]@#$)[Return]@#*)[Return]@#(([Return]@$(([Return]@%(([Return]@&))[Return]@*)![Return]@()![Return]#))![Return])>)&[Return])>!%[Return])>@![Return])>@%[Return])>@([Return])>%[Return])>%%[Return])>%([Return])>^#[Back]@[Return])>^#[Return])>^%[Return])>^@[Return]([Back])>^[Return])>%#[Back]@[Return])>%[Return])>#![Return])>@%[Return])>@![Return]_[Back])>!![Return])>)*[Return])>)%[Return]$\n', '[ PID: 5720 - \xd5\xf8 - Import and Export: expGraph ]%))[Return]%))[Lcontrol]v%))\n', '[ PID: 5720 - \xd5\xf8 - OriginPro 9 64-bit - C:\\Users\\Administrator\\Documents\\OriginLab\\90\\User Files\\UNTITLED * ]!^[Back]%(*[Return]!&))[Return]!&(*[Return]!*(*[Return]!()[Back](([Return]@!))[Return]@@)![Return]@#))[Return]@$))[Return]@%)![Return]@^)@[Return]@&))[Return]@*))[Return]@())[Return]#)))[Return]@@@)[Return]@@$)[Return]@@^)[Return]@@*)[Return]@@^![Return]@@*![Return]#[Back]@#!([Return][Back][Back][Up]@#))[Return]@#!([Return]@#$)[Return]@#^)[Return]@#*)[Return]@$))[Return]@%)![Return]@^)@[Return]@&))[Return]@*))[Return]@())[Return]#)))[Return])>$#[Return])>$([Return])>%%[Return])>^$[Rshift][Return])>^$[Return][Back][Back][Return])>&$[Return])>*![Return])>**[Return])>*([Return])>([Return])>(![Return])>(@[Return])>(![Return])>*([Return])>([Return])>(![Return])>(![Return])>*([Return])>**[Return])>**[Return])>*@[Return])>&%[Return])>^*[Return])>^![Return])>%^[Return])_[Back]>%![Return]!)))\n', '[ PID: 6800 - \xd5\xf8 - \xb7\xfb\xba\xc5\xb4\xf3\xc8\xab ][Lcontrol]v[Lcontrol]v[Lcontrol]v[Lcontrol]v\n', '[ PID: 5720 - \xd5\xf8 - OriginPro 9 64-bit - C:\\Users\\Administrator\\Documents\\OriginLab\\90\\User Files\\UNTITLED * ][Lcontrol]v[Back][Back][Back][Back][Back][Back]!)))\n', '[ PID: 5720 - \xd5\xf8 - Import and Export: expGraph ][Back]|!))[Back][Left][Left][Back]\n', '[ PID: 4368 - \xd5\xf8 - e\xcf\xd5\xe3\xb5\x94v9\xd4_C (G:) ][Lcontrol][Lshift]siay[Back][Back][Back][Back][Capital]shi[Back][Back][Back][Lcontrol][Lshift]siy[Back][Back]hiyan[Space]\n', '[ PID: 9364 - \xd5\xf8 - QQ ][Numpad7][Numpad2][Numpad7][Numpad2][Numpad6][Numpad3][Numpad9][Numpad9][Numpad2]\n', '[ PID: 5336 - \xd5\xf8 - QQEdit ][Numpad5][Numpad6][Numpad5]l[Numpad9][Numpad5][Numpad6]d[Numpad7][Numpad7][Numpad3]n[Numpad5][Numpad6].^.lli[Return]\n', '[ PID: 5336 - \xd5\xf8 - QQ ]utn[Space][Back]zhu+@\n', '[ PID: 5336 - \xd5\xf8 - \xca\xfd\xd1\xa7\xd4\xba\xd1\xa7\xca\xf5\xb5\xf7\xd1\xd0\xb2\xbf\xd6\xec\xd5\xfe\xcd\xac ]ie[Space][Back][Back][Back][Back]zongjie[Space]yiba[Space][Back][Back]ai[Space][Back]i[Back]zai[Space]introuction[Return]d[Return]u[Back]bufen[Space][Return]\n', '[ PID: 10008 - \xd5\xf8 - QQ ][Return]\n', '[ PID: 5640 - \xd5\xf8 - QQEdit ][Numpad3]\n', '[ PID: 10008 - \xd5\xf8 - QQ ][Numpad3][Numpad5][Numpad4][Numpad0][Numpad5][Numpad9][Numpad4][Numpad2][Numpad8][Tab]\n', '[ PID: 5640 - \xd5\xf8 - QQEdit ][Capital]l[Back][Back][Capital][Capital]lx[Capital]loeu.[Return][Capital]lx[Capital]loeu.[Return]\n', '[ PID: 8784 - \xd5\xf8 - QQ ][Numpad9][Numpad0][Numpad6][Numpad8][Numpad9][Numpad5][Numpad3][Numpad5][Numpad9]\n', '[ PID: 9524 - \xd5\xf8 - QQEdit ]wtp[Capital]wtp[Capital][Back][Back][Back][Back][Back][Back][Back][Back][Back][Back][Back][Back][Back][Back][Back][Back][Back][Capital]wtp[Capital]tp|%*#[Return]\n', '[ PID: 4368 - \xd5\xf8 -  ][Return][Numpad3][Numpad1][Numpad2][Numpad3][Numpad1]\n', '[ PID: 3908 - ? - QQ ][Numpad3][Numpad3][Numpad3][Numpad3][Back]\n', '[ PID: 2680 - SohuNews.exe - \xcd\xb7\xcc\xf5\xd0\xc2\xce\xc5 ][Back][Back][Back][Back]\n', '[ PID: 3908 - QQ.exe - QQ ][Back][Back][Numpad3][Numpad3][Numpad0][Numpad7][Numpad1][Numpad7][Numpad0][Numpad1][Numpad7][Numpad6]\n', '[ PID: 4964 - QQ.exe - QQEdit ][Capital]djt[Numpad4][Capital][Back][Back][Back][Back][Back][Back][Back][Back][Capital][Back][Capital]jjt[Numpad4][Numpad3][Numpad1][Numpad3]wmx[Return]\n', '[ PID: 3908 - QQ.exe - QQ ][Numpad9][Numpad7][Numpad0][Numpad6][Numpad1][Numpad8]\n', '[ PID: 4964 - QQ.exe - QQEdit ]djt[Numpad4][Numpad3][Numpad1][Numpad3]wmx[Numpad9][Numpad7][Numpad0][Numpad6][Numpad1][Numpad8][Return]\n', '[ PID: 7456 - iexplore.exe - \xb0\xd9\xb6\xc8\xd2\xbb\xcf\xc2\xa3\xac\xc4\xe3\xbe\xcd\xd6\xaa\xb5\xc0 - Internet Explorer ][Numpad1][Numpad2]\n', '[ PID: 7456 - iexplore.exe - 12306_\xb0\xd9\xb6\xc8\xcb\xd1\xcb\xf7 - Internet Explorer ][Numpad6]\n', '[ PID: 7456 - iexplore.exe - 126_\xb0\xd9\xb6\xc8\xcb\xd1\xcb\xf7 - Internet Explorer ]wu[Back][Back][Capital]wumi[Back][Back][Back][Back][Lshift]wumig[Back]ngxuan^*[Back]!*[Numpad9][Numpad7][Numpad0][Numpad6][Numpad1][Numpad8][Return]\n', '[ PID: 7456 - iexplore.exe - https://fapiao.yonyoucloud.com/invoiceent-web/s/41f97255bc52ff7edcd3167c6f739177 - Internet Explorer ][Capital]topu[Return]\n', '[ PID: 4964 - QQ.exe -  ][Lcontrol][Lcontrol][Lcontrol]c\n', '[ PID: 11084 - WINWORD.EXE - \xce\xc4\xb5\xb51 - Word ][Lcontrol][Lcontrol][Lcontrol][Lcontrol][Lcontrol]v']