['\n', '[ PID: 8060 - ? - Mozilla Firefox ][Numpad1][Numpad0][Decimal][Numpad1][Numpad0][Decimal][Numpad1][Decimal][Numpad6][Return]\n', '[ PID: 8060 - ? - \xc0\xbc\xd6\xdd\xb4\xf3\xd1\xa7\xd0\xa3\xd4\xb0\xcd\xf8\xd7\xbc\xc8\xeb\xc8\xcf\xd6\xa4\xcf\xb5\xcd\xb3 - Mozilla Firefox ][S][U][N][H][C][H][Return][Rshift][1][7][S][H][Z][Rshift][2][Numpad1][Numpad5][Numpad8][Numpad6][Numpad5][Numpad2][Numpad3][Numpad1][Numpad3][Numpad0][Numpad7]\n', '[ PID: 8060 - ? - \xd0\xc2\xb1\xea\xc7\xa9\xd2\xb3 - Mozilla Firefox ][B][A][I][D][U][Space][Return]\n', '[ PID: 8060 - ? - \xb0\xd9\xb6\xc8\xd2\xbb\xcf\xc2\xa3\xac\xc4\xe3\xbe\xcd\xd6\xaa\xb5\xc0 - Mozilla Firefox ][W][Back][T][E][N][G][X][U][N][W][E][N][J][U][A][N][Down][Return]\n', '[ PID: 540 - QQ.exe - QQ ][Numpad4]\n', '[ PID: 8852 - SohuNews.exe - \xcd\xb7\xcc\xf5\xd0\xc2\xce\xc5 ][Back]\n', '[ PID: 540 - QQ.exe - QQ ][Back][Numpad1][Numpad0][Numpad1][Numpad5][Numpad5][Numpad2][Numpad4][Numpad2][Numpad9][Numpad5]\n', '[ PID: 6316 - QQ.exe - QQEdit ]MYF[Rshift]@*VT[Numpad4][Numpad5][Numpad6][Numpad8]@[Numpad3][Numpad8][Numpad4])[Numpad6][Numpad1]$[Numpad8][Numpad8]T)^ZZ)C$ZT[Rshift]@@@[Numpad4][Numpad5])[Numpad6][Numpad1]L[Numpad2][Numpad8]V[Numpad4][Numpad0]Z[Numpad4][Numpad8][Numpad1]ZVN\n', '[ PID: 6732 - firefox.exe - hao123_\xc9\xcf\xcd\xf8\xb4\xd3\xd5\xe2\xc0\xef\xbf\xaa\xca\xbc - Mozilla Firefox ]LZDX[Space]CUIYINGXUEYUAN[Space][Back][Back][Back][Back][Back]CUIYINGXUEYUAN[Space][Return]']